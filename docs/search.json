[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "My Projects",
    "section": "",
    "text": "This is Project 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA Replication of Karlan and List (2007)\n\n\n\n\n\n\nIdris Huang\n\n\nApr 23, 2025\n\n\n\n\n\n\n\n\n\n\n\nA Replication of Karlan and List (2007)\n\n\n\n\n\n\nIdris Huang\n\n\nApr 23, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/HW1/hw1_questions.html",
    "href": "blog/HW1/hw1_questions.html",
    "title": "A Replication of Karlan and List (2007)",
    "section": "",
    "text": "Dean Karlan and John List (2007) carried out a natural field experiment to investigate the effectiveness of different matching grant rates (1:1, 2:1, and 3:1) in charitable fundraising. In this work, I replicated and discussed some key results:\n\nChecking randomization balance\n\nEstimating the effect of any matching grant on donation probability\n\nComparing different match ratios\n\nExamining the size of donations\n\nDemonstrating the Law of Large Numbers (LLN) and Central Limit Theorem (CLT) with simulations\n\n\n\nShow/Hide Code\nimport numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom statsmodels.stats.weightstats import ttest_ind\nimport matplotlib.pyplot as plt\n\nplt.rcParams['axes.prop_cycle'] = plt.cycler(color=[\"#2ca02c\",\"#ff7f0e\",\"#9467bd\",\"#d62728\"])\nplt.rcParams['figure.figsize'] = (7,5)\n\ndef short_summary(model, label=None):\n    if label:\n        print(f\"=== {label} ===\")\n    df_summary = pd.DataFrame({\n        'coef': model.params,\n        'std err': model.bse,\n        't': model.tvalues,\n        'P&gt;|t|': model.pvalues\n    })\n    print(df_summary)\n    print()\n\ndata_filepath = \"karlan_list_2007.dta\"\ndf = pd.read_stata(data_filepath)\ndf_treat = df[df['treatment'] == 1]\ndf_cont  = df[df['control'] == 1]"
  },
  {
    "objectID": "blog/HW1/hw1_questions.html#introduction",
    "href": "blog/HW1/hw1_questions.html#introduction",
    "title": "A Replication of Karlan and List (2007)",
    "section": "",
    "text": "Dean Karlan and John List (2007) carried out a natural field experiment to investigate the effectiveness of different matching grant rates (1:1, 2:1, and 3:1) in charitable fundraising. In this work, I replicated and discussed some key results:\n\nChecking randomization balance\n\nEstimating the effect of any matching grant on donation probability\n\nComparing different match ratios\n\nExamining the size of donations\n\nDemonstrating the Law of Large Numbers (LLN) and Central Limit Theorem (CLT) with simulations\n\n\n\nShow/Hide Code\nimport numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom statsmodels.stats.weightstats import ttest_ind\nimport matplotlib.pyplot as plt\n\nplt.rcParams['axes.prop_cycle'] = plt.cycler(color=[\"#2ca02c\",\"#ff7f0e\",\"#9467bd\",\"#d62728\"])\nplt.rcParams['figure.figsize'] = (7,5)\n\ndef short_summary(model, label=None):\n    if label:\n        print(f\"=== {label} ===\")\n    df_summary = pd.DataFrame({\n        'coef': model.params,\n        'std err': model.bse,\n        't': model.tvalues,\n        'P&gt;|t|': model.pvalues\n    })\n    print(df_summary)\n    print()\n\ndata_filepath = \"karlan_list_2007.dta\"\ndf = pd.read_stata(data_filepath)\ndf_treat = df[df['treatment'] == 1]\ndf_cont  = df[df['control'] == 1]"
  },
  {
    "objectID": "blog/HW1/hw1_questions.html#data",
    "href": "blog/HW1/hw1_questions.html#data",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Data",
    "text": "Data\n\n\nShow/Hide Code\nprint(\"Columns:\\n\", df.columns.tolist())\nprint(\"\\nSummary statistics:\\n\", df.describe())\n\n\nColumns:\n ['treatment', 'control', 'ratio', 'ratio2', 'ratio3', 'size', 'size25', 'size50', 'size100', 'sizeno', 'ask', 'askd1', 'askd2', 'askd3', 'ask1', 'ask2', 'ask3', 'amount', 'gave', 'amountchange', 'hpa', 'ltmedmra', 'freq', 'years', 'year5', 'mrm2', 'dormant', 'female', 'couple', 'state50one', 'nonlit', 'cases', 'statecnt', 'stateresponse', 'stateresponset', 'stateresponsec', 'stateresponsetminc', 'perbush', 'close25', 'red0', 'blue0', 'redcty', 'bluecty', 'pwhite', 'pblack', 'page18_39', 'ave_hh_sz', 'median_hhincome', 'powner', 'psch_atlstba', 'pop_propurban']\n\nSummary statistics:\n           treatment       control        ratio2        ratio3        size25  \\\ncount  50083.000000  50083.000000  50083.000000  50083.000000  50083.000000   \nmean       0.666813      0.333187      0.222311      0.222211      0.166723   \nstd        0.471357      0.471357      0.415803      0.415736      0.372732   \nmin        0.000000      0.000000      0.000000      0.000000      0.000000   \n25%        0.000000      0.000000      0.000000      0.000000      0.000000   \n50%        1.000000      0.000000      0.000000      0.000000      0.000000   \n75%        1.000000      1.000000      0.000000      0.000000      0.000000   \nmax        1.000000      1.000000      1.000000      1.000000      1.000000   \n\n             size50       size100        sizeno         askd1         askd2  \\\ncount  50083.000000  50083.000000  50083.000000  50083.000000  50083.000000   \nmean       0.166623      0.166723      0.166743      0.222311      0.222291   \nstd        0.372643      0.372732      0.372750      0.415803      0.415790   \nmin        0.000000      0.000000      0.000000      0.000000      0.000000   \n25%        0.000000      0.000000      0.000000      0.000000      0.000000   \n50%        0.000000      0.000000      0.000000      0.000000      0.000000   \n75%        0.000000      0.000000      0.000000      0.000000      0.000000   \nmax        1.000000      1.000000      1.000000      1.000000      1.000000   \n\n       ...        redcty       bluecty        pwhite        pblack  \\\ncount  ...  49978.000000  49978.000000  48217.000000  48047.000000   \nmean   ...      0.510245      0.488715      0.819599      0.086710   \nstd    ...      0.499900      0.499878      0.168561      0.135868   \nmin    ...      0.000000      0.000000      0.009418      0.000000   \n25%    ...      0.000000      0.000000      0.755845      0.014729   \n50%    ...      1.000000      0.000000      0.872797      0.036554   \n75%    ...      1.000000      1.000000      0.938827      0.090882   \nmax    ...      1.000000      1.000000      1.000000      0.989622   \n\n          page18_39     ave_hh_sz  median_hhincome        powner  \\\ncount  48217.000000  48221.000000     48209.000000  48214.000000   \nmean       0.321694      2.429012     54815.700533      0.669418   \nstd        0.103039      0.378115     22027.316665      0.193405   \nmin        0.000000      0.000000      5000.000000      0.000000   \n25%        0.258311      2.210000     39181.000000      0.560222   \n50%        0.305534      2.440000     50673.000000      0.712296   \n75%        0.369132      2.660000     66005.000000      0.816798   \nmax        0.997544      5.270000    200001.000000      1.000000   \n\n       psch_atlstba  pop_propurban  \ncount  48215.000000   48217.000000  \nmean       0.391661       0.871968  \nstd        0.186599       0.258654  \nmin        0.000000       0.000000  \n25%        0.235647       0.884929  \n50%        0.373744       1.000000  \n75%        0.530036       1.000000  \nmax        1.000000       1.000000  \n\n[8 rows x 48 columns]\n\n\n\n\n\n\n\n\nVariable Definitions\n\n\n\n\n\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\ntreatment\nTreatment\n\n\ncontrol\nControl\n\n\nratio\nMatch ratio\n\n\nratio2\n2:1 match ratio\n\n\nratio3\n3:1 match ratio\n\n\nsize\nMatch threshold\n\n\nsize25\n$25,000 match threshold\n\n\nsize50\n$50,000 match threshold\n\n\nsize100\n$100,000 match threshold\n\n\nsizeno\nUnstated match threshold\n\n\nask\nSuggested donation amount\n\n\naskd1\nSuggested donation was highest previous contribution\n\n\naskd2\nSuggested donation was 1.25 x highest previous contribution\n\n\naskd3\nSuggested donation was 1.50 x highest previous contribution\n\n\nask1\nHighest previous contribution (for suggestion)\n\n\nask2\n1.25 x highest previous contribution (for suggestion)\n\n\nask3\n1.50 x highest previous contribution (for suggestion)\n\n\namount\nDollars given\n\n\ngave\nGave anything\n\n\namountchange\nChange in amount given\n\n\nhpa\nHighest previous contribution\n\n\nltmedmra\nSmall prior donor: last gift was less than median $35\n\n\nfreq\nNumber of prior donations\n\n\nyears\nNumber of years since initial donation\n\n\nyear5\nAt least 5 years since initial donation\n\n\nmrm2\nNumber of months since last donation\n\n\ndormant\nAlready donated in 2005\n\n\nfemale\nFemale\n\n\ncouple\nCouple\n\n\nstate50one\nState tag: 1 for one observation of each of 50 states; 0 otherwise\n\n\nnonlit\nNonlitigation\n\n\ncases\nCourt cases from state in 2004-5 in which organization was involved\n\n\nstatecnt\nPercent of sample from state\n\n\nstateresponse\nProportion of sample from the state who gave\n\n\nstateresponset\nProportion of treated sample from the state who gave\n\n\nstateresponsec\nProportion of control sample from the state who gave\n\n\nstateresponsetminc\nstateresponset - stateresponsec\n\n\nperbush\nState vote share for Bush\n\n\nclose25\nState vote share for Bush between 47.5% and 52.5%\n\n\nred0\nRed state\n\n\nblue0\nBlue state\n\n\nredcty\nRed county\n\n\nbluecty\nBlue county\n\n\npwhite\nProportion white within zip code\n\n\npblack\nProportion black within zip code\n\n\npage18_39\nProportion age 18-39 within zip code\n\n\nave_hh_sz\nAverage household size within zip code\n\n\nmedian_hhincome\nMedian household income within zip code\n\n\npowner\nProportion house owner within zip code\n\n\npsch_atlstba\nProportion who finished college within zip code\n\n\npop_propurban\nProportion of population urban within zip code\n\n\n\n\n\n\nInterpretation: About 50,000 observations; key columns include treatment, control, gave, amount, etc."
  },
  {
    "objectID": "blog/HW1/hw1_questions.html#balance-test",
    "href": "blog/HW1/hw1_questions.html#balance-test",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Balance Test",
    "text": "Balance Test\n\n\nShow/Hide Code\nmrm2_treat = df_treat['mrm2'].dropna()\nmrm2_cont  = df_cont['mrm2'].dropna()\n\nt_stat, p_val, df_deg = ttest_ind(mrm2_treat, mrm2_cont, usevar='unequal')\nprint(f\"T-test for mrm2: t={t_stat:.4f}, p={p_val:.4g}, df={df_deg:.1f}\")\n\nmodel_bal = smf.ols(\"mrm2 ~ treatment\", data=df).fit()\nshort_summary(model_bal, label=\"OLS for mrm2 on treatment\")\n\n\nT-test for mrm2: t=0.1195, p=0.9049, df=33394.5\n=== OLS for mrm2 on treatment ===\n                coef   std err           t     P&gt;|t|\nIntercept  12.998142  0.093526  138.978873  0.000000\ntreatment   0.013686  0.114534    0.119492  0.904886\n\n\n\nResult: No significant difference in mrm2, suggesting balance."
  },
  {
    "objectID": "blog/HW1/hw1_questions.html#experimental-results",
    "href": "blog/HW1/hw1_questions.html#experimental-results",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Experimental Results",
    "text": "Experimental Results\n\n1. Charitable Contribution Made\n\nA. Bar Plot\n\n\nShow/Hide Code\ngave_treat_mean = df_treat['gave'].mean()\ngave_cont_mean  = df_cont['gave'].mean()\nprint(\"Proportion gave - Control:\", gave_cont_mean, \"Treatment:\", gave_treat_mean)\n\n\nProportion gave - Control: 0.017858212980164198 Treatment: 0.02203856749311295\n\n\n\n\n\nBarplot_Proportion_Donors\n\n\n\n\nB. T-test & Regression\n\n\nShow/Hide Code\ngave_treat_vals = df_treat['gave']\ngave_cont_vals  = df_cont['gave']\nt_gave, p_gave, df_g = ttest_ind(gave_treat_vals, gave_cont_vals, usevar='unequal')\nprint(f\"gave T-test: t={t_gave:.4f}, p={p_gave:.4g}, df={df_g:.1f}\")\n\nmodel_gave_ols = smf.ols(\"gave ~ treatment\", data=df).fit()\nshort_summary(model_gave_ols, label=\"OLS for gave\")\n\nmodel_gave_probit = smf.probit(\"gave ~ treatment\", data=df).fit(disp=False)\nshort_summary(model_gave_probit, label=\"Probit for gave\")\n\n\ngave T-test: t=3.2095, p=0.001331, df=36576.8\n=== OLS for gave ===\n               coef   std err          t         P&gt;|t|\nIntercept  0.017858  0.001101  16.224643  4.779032e-59\ntreatment  0.004180  0.001348   3.101361  1.927403e-03\n\n=== Probit for gave ===\n               coef   std err         t     P&gt;|t|\nIntercept -2.100141  0.023316 -90.07277  0.000000\ntreatment  0.086785  0.027879   3.11293  0.001852\n\n\n\nResult: Matching grants significantly increase donation probability, though the effect size is small.\n\n\n\n2. Differences Between Match Rates\n\n\nShow/Hide Code\ngave_1to1 = df[df['ratio'] == 1]['gave']\ngave_2to1 = df[df['ratio2'] == 1]['gave']\ngave_3to1 = df[df['ratio3'] == 1]['gave']\n\nt_12, p_12, df_12 = ttest_ind(gave_1to1, gave_2to1, usevar='unequal')\nt_23, p_23, df_23 = ttest_ind(gave_2to1, gave_3to1, usevar='unequal')\nprint(f\"1:1 vs 2:1 =&gt; t={t_12:.4f}, p={p_12:.4g}\")\nprint(f\"2:1 vs 3:1 =&gt; t={t_23:.4f}, p={p_23:.4g}\")\n\nmodel_ratio = smf.ols(\"gave ~ ratio + ratio2 + ratio3\", data=df).fit()\nshort_summary(model_ratio, label=\"OLS for gave on ratio dummies\")\n\nr_1 = gave_1to1.mean()\nr_2 = gave_2to1.mean()\nr_3 = gave_3to1.mean()\nprint(\"Diff(1:1 vs 2:1):\", r_2 - r_1)\nprint(\"Diff(2:1 vs 3:1):\", r_3 - r_2)\n\n\n1:1 vs 2:1 =&gt; t=-0.9650, p=0.3345\n2:1 vs 3:1 =&gt; t=-0.0501, p=0.96\n=== OLS for gave on ratio dummies ===\n                    coef       std err          t         P&gt;|t|\nIntercept   1.802911e-02  1.386416e-03  13.004112  1.339110e-38\nratio[T.1]  2.732484e-03  1.914416e-03   1.427320  1.534940e-01\nratio[T.2] -3.535509e+10  2.437258e+11  -0.145061  8.846633e-01\nratio[T.3] -1.520186e+09  1.038114e+10  -0.146437  8.835767e-01\nratio2      3.535509e+10  2.437258e+11   0.145061  8.846633e-01\nratio3      1.520186e+09  1.038114e+10   0.146437  8.835767e-01\n\nDiff(1:1 vs 2:1): 0.0018842510217149944\nDiff(2:1 vs 3:1): 0.00010002398025293902\n\n\nResult: No evidence that higher match ratios lead to significantly greater giving.\n\n\n3. Size of Charitable Contribution\n\nA. Unconditional and Conditional\n\n\nShow/Hide Code\namt_treat = df_treat['amount'].fillna(0)\namt_cont  = df_cont['amount'].fillna(0)\nt_amt, p_amt, _ = ttest_ind(amt_treat, amt_cont, usevar='unequal')\nprint(f\"Uncond. amount T-test: t={t_amt:.4f}, p={p_amt:.4g}\")\n\nmodel_amt_ols = smf.ols(\"amount ~ treatment\", data=df).fit()\nshort_summary(model_amt_ols, label=\"OLS for unconditional 'amount'\")\n\ndf_givers = df[df['gave'] == 1]\namt_treat_g = df_givers[df_givers['treatment']==1]['amount']\namt_cont_g  = df_givers[df_givers['control'] ==1]['amount']\n\nt_amt_g, p_amt_g, _ = ttest_ind(amt_treat_g, amt_cont_g, usevar='unequal')\nprint(f\"Cond. amount T-test: t={t_amt_g:.4f}, p={p_amt_g:.4g}\")\n\nmodel_amt_cond_ols = smf.ols(\"amount ~ treatment\", data=df_givers).fit()\nshort_summary(model_amt_cond_ols, label=\"OLS for amount among donors\")\n\n\nUncond. amount T-test: t=1.9183, p=0.05509\n=== OLS for unconditional 'amount' ===\n               coef   std err          t         P&gt;|t|\nIntercept  0.813268  0.067418  12.062995  1.843438e-33\ntreatment  0.153605  0.082561   1.860503  6.282029e-02\n\nCond. amount T-test: t=-0.5846, p=0.559\n=== OLS for amount among donors ===\n                coef   std err          t         P&gt;|t|\nIntercept  45.540268  2.423378  18.792063  5.473578e-68\ntreatment  -1.668393  2.872384  -0.580839  5.614756e-01\n\n\n\nResult: Very small/unreliable difference in donation amounts.\n\n\nB. Histograms\n\n\nInterpretation: Distributions appear similar between groups."
  },
  {
    "objectID": "blog/HW1/hw1_questions.html#simulation-experiments",
    "href": "blog/HW1/hw1_questions.html#simulation-experiments",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Simulation Experiments",
    "text": "Simulation Experiments\n\nLaw of Large Numbers\n\n\nShow/Hide Code\nN_sims = 10000\np_c = 0.018\np_t = 0.022\n\nsim_c = np.random.binomial(1, p_c, N_sims)\nsim_t = np.random.binomial(1, p_t, N_sims)\ndiff_vec = sim_t - sim_c\ncum_avg = np.cumsum(diff_vec)/np.arange(1,N_sims+1)\n\n\n\n\n\nCumulative Average difference plot\n\n\nInterpretation: Cumulative average converges near 0.004 (the true difference in proportions).\n\n\nCentral Limit Theorem\n\n\nShow/Hide Code\ndef draw_mean_diffs(n_control, n_treatment, iters=1000):\n    out = []\n    for _ in range(iters):\n        c_draws = np.random.binomial(1, p_c, n_control)\n        t_draws = np.random.binomial(1, p_t, n_treatment)\n        out.append(t_draws.mean() - c_draws.mean())\n    return np.array(out)\n\nfor s in [50, 200, 500, 1000]:\n    diffs = draw_mean_diffs(s, s)\n\n\n\n\n\n\nInterpretation: As n increases, the sampling distribution becomes tighter and more bell-shaped."
  },
  {
    "objectID": "blog/HW1/hw1_questions.html#conclusion",
    "href": "blog/HW1/hw1_questions.html#conclusion",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Conclusion",
    "text": "Conclusion\nThe results replicate those of Karlan and List (2007): matching grants increase donation rates, but higher match ratios do not improve outcomes further. The average donation amount is unaffected. Simulations illustrate the LLN and CLT in practice."
  },
  {
    "objectID": "blog/HW1/hw1_questions.html#full-code",
    "href": "blog/HW1/hw1_questions.html#full-code",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Full Code",
    "text": "Full Code\n\n\nShow/Hide Code\n# A Replication of Karlan and List (2007)\nimport numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom statsmodels.stats.weightstats import ttest_ind\nimport matplotlib.pyplot as plt\n\nplt.rcParams['axes.prop_cycle'] = plt.cycler(color=[\"#2ca02c\",\"#ff7f0e\",\"#9467bd\",\"#d62728\"])\nplt.rcParams['figure.figsize'] = (7,5)\n\ndef short_summary(model, label=None):\n    if label:\n        print(f\"=== {label} ===\")\n    df_summary = pd.DataFrame({\n        'coef': model.params,\n        'std err': model.bse,\n        't': model.tvalues,\n        'P&gt;|t|': model.pvalues\n    })\n    print(df_summary)\n    print()\n\ndata_filepath = \"karlan_list_2007.dta\"\ndf = pd.read_stata(data_filepath)\n\n# Balance Test\ndf_treat = df[df['treatment'] == 1]\ndf_cont = df[df['control'] == 1]\n\nmrm2_treat = df_treat['mrm2'].dropna()\nmrm2_cont = df_cont['mrm2'].dropna()\nt_stat, p_val, df_deg = ttest_ind(mrm2_treat, mrm2_cont, usevar='unequal')\nmodel_bal = smf.ols(\"mrm2 ~ treatment\", data=df).fit()\nshort_summary(model_bal, label=\"OLS for mrm2 on treatment\")\n\n# Charitable Contributions\ngave_treat_mean = df_treat['gave'].mean()\ngave_cont_mean = df_cont['gave'].mean()\nplt.bar([\"Control\", \"Treatment\"], [gave_cont_mean, gave_treat_mean], color=[\"#1f77b4\",\"#ff7f0e\"])\nplt.title(\"Proportion Who Donated: Control vs Treatment\")\nplt.ylabel(\"Proportion\")\nplt.show()\n\ngave_treat_vals = df_treat['gave']\ngave_cont_vals = df_cont['gave']\nt_gave, p_gave, df_g = ttest_ind(gave_treat_vals, gave_cont_vals, usevar='unequal')\nmodel_gave_ols = smf.ols(\"gave ~ treatment\", data=df).fit()\nshort_summary(model_gave_ols, label=\"OLS for gave on treatment\")\nmodel_gave_probit = smf.probit(\"gave ~ treatment\", data=df).fit(disp=False)\nshort_summary(model_gave_probit, label=\"Probit for gave on treatment\")\n\n# Match Ratios\ngave_1to1 = df[df['ratio'] == 1]['gave']\ngave_2to1 = df[df['ratio2'] == 1]['gave']\ngave_3to1 = df[df['ratio3'] == 1]['gave']\nt_12, p_12, df_12 = ttest_ind(gave_1to1, gave_2to1, usevar='unequal')\nt_23, p_23, df_23 = ttest_ind(gave_2to1, gave_3to1, usevar='unequal')\nmodel_ratio = smf.ols(\"gave ~ ratio + ratio2 + ratio3\", data=df).fit()\nshort_summary(model_ratio, label=\"OLS for gave on ratio dummies\")\nprint(\"Response rate difference, 1:1 vs 2:1 =\", (gave_2to1.mean() - gave_1to1.mean())*100)\nprint(\"Response rate difference, 2:1 vs 3:1 =\", (gave_3to1.mean() - gave_2to1.mean())*100)\n\n# Donation Amounts\namt_treat = df_treat['amount'].fillna(0)\namt_cont = df_cont['amount'].fillna(0)\nt_amt, p_amt, df_amt_ = ttest_ind(amt_treat, amt_cont, usevar='unequal')\nmodel_amt_ols = smf.ols(\"amount ~ treatment\", data=df).fit()\nshort_summary(model_amt_ols, label=\"OLS for unconditional 'amount'\")\n\ndf_givers = df[df['gave'] == 1]\namt_treat_g = df_givers[df_givers['treatment']==1]['amount']\namt_cont_g = df_givers[df_givers['control']==1]['amount']\nt_amt_g, p_amt_g, df_amt_g = ttest_ind(amt_treat_g, amt_cont_g, usevar='unequal')\nmodel_amt_cond_ols = smf.ols(\"amount ~ treatment\", data=df_givers).fit()\nshort_summary(model_amt_cond_ols, label=\"OLS for amount among donors\")\n\n# Histograms\nmean_treat_g = amt_treat_g.mean()\nmean_cont_g = amt_cont_g.mean()\n\nplt.hist(amt_treat_g, bins=30, color=\"#9467bd\")\nplt.axvline(mean_treat_g, color='red', linestyle='--', linewidth=2)\nplt.title(\"Histogram: Donation Amounts (Treatment donors)\")\nplt.xlabel(\"Donation Amount\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\nplt.hist(amt_cont_g, bins=30, color=\"#d62728\")\nplt.axvline(mean_cont_g, color='red', linestyle='--', linewidth=2)\nplt.title(\"Histogram: Donation Amounts (Control donors)\")\nplt.xlabel(\"Donation Amount\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\n# LLN Simulation\nN_sims = 10000\np_c = 0.018\np_t = 0.022\nsim_c = np.random.binomial(1, p_c, size=N_sims)\nsim_t = np.random.binomial(1, p_t, size=N_sims)\ndiff_vec = sim_t - sim_c\ncum_avg = np.cumsum(diff_vec) / np.arange(1, N_sims+1)\n\nplt.plot(cum_avg, color=\"#2ca02c\")\nplt.axhline(y=(p_t - p_c), color='red', linestyle='--')\nplt.title(\"Cumulative Average of Differences (Treatment - Control)\")\nplt.xlabel(\"Number of draws\")\nplt.ylabel(\"Cumulative average difference\")\nplt.show()\n\n# CLT Simulation\ndef draw_mean_diffs(n_control, n_treatment, iters=1000):\n    out = []\n    for _ in range(iters):\n        c_draws = np.random.binomial(1, p_c, size=n_control)\n        t_draws = np.random.binomial(1, p_t, size=n_treatment)\n        out.append(t_draws.mean() - c_draws.mean())\n    return np.array(out)\n\nfor s in [50, 200, 500, 1000]:\n    diffs_s = draw_mean_diffs(s, s)\n    plt.hist(diffs_s, bins=30, color=\"#ff7f0e\", alpha=0.8)\n    plt.axvline(0, color='black', linestyle='--')\n    plt.title(f\"Histogram of Differences (n={s}, 1000 reps)\")\n    plt.xlabel(\"Difference in means (treat - control)\")\n    plt.ylabel(\"Frequency\")\n    plt.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Idris Huang",
    "section": "",
    "text": "Here is a paragraph about me!"
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Resume",
    "section": "",
    "text": "Download PDF file."
  },
  {
    "objectID": "blog/project 2/index.html",
    "href": "blog/project 2/index.html",
    "title": "This is Project 2",
    "section": "",
    "text": "I cleaned some data\n\n\n\nI analyzed the data"
  },
  {
    "objectID": "blog/project 2/index.html#section-1-data",
    "href": "blog/project 2/index.html#section-1-data",
    "title": "This is Project 2",
    "section": "",
    "text": "I cleaned some data"
  },
  {
    "objectID": "blog/project 2/index.html#section-2-analysis",
    "href": "blog/project 2/index.html#section-2-analysis",
    "title": "This is Project 2",
    "section": "",
    "text": "I analyzed the data"
  },
  {
    "objectID": "blog/HW1/index.html",
    "href": "blog/HW1/index.html",
    "title": "A Replication of Karlan and List (2007)",
    "section": "",
    "text": "Dean Karlan and John List (2007) carried out a natural field experiment to investigate the effectiveness of different matching grant rates (1:1, 2:1, and 3:1) in charitable fundraising. In this work, I replicated and discussed some key results:\n\nChecking randomization balance\n\nEstimating the effect of any matching grant on donation probability\n\nComparing different match ratios\n\nExamining the size of donations\n\nDemonstrating the Law of Large Numbers (LLN) and Central Limit Theorem (CLT) with simulations\n\n\n\nShow/Hide Code\nimport numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom statsmodels.stats.weightstats import ttest_ind\nimport matplotlib.pyplot as plt\n\nplt.rcParams['axes.prop_cycle'] = plt.cycler(color=[\"#2ca02c\",\"#ff7f0e\",\"#9467bd\",\"#d62728\"])\nplt.rcParams['figure.figsize'] = (7,5)\n\ndef short_summary(model, label=None):\n    if label:\n        print(f\"=== {label} ===\")\n    df_summary = pd.DataFrame({\n        'coef': model.params,\n        'std err': model.bse,\n        't': model.tvalues,\n        'P&gt;|t|': model.pvalues\n    })\n    print(df_summary)\n    print()\n\ndata_filepath = \"karlan_list_2007.dta\"\ndf = pd.read_stata(data_filepath)\ndf_treat = df[df['treatment'] == 1]\ndf_cont  = df[df['control'] == 1]"
  },
  {
    "objectID": "blog/HW1/index.html#introduction",
    "href": "blog/HW1/index.html#introduction",
    "title": "A Replication of Karlan and List (2007)",
    "section": "",
    "text": "Dean Karlan and John List (2007) carried out a natural field experiment to investigate the effectiveness of different matching grant rates (1:1, 2:1, and 3:1) in charitable fundraising. In this work, I replicated and discussed some key results:\n\nChecking randomization balance\n\nEstimating the effect of any matching grant on donation probability\n\nComparing different match ratios\n\nExamining the size of donations\n\nDemonstrating the Law of Large Numbers (LLN) and Central Limit Theorem (CLT) with simulations\n\n\n\nShow/Hide Code\nimport numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom statsmodels.stats.weightstats import ttest_ind\nimport matplotlib.pyplot as plt\n\nplt.rcParams['axes.prop_cycle'] = plt.cycler(color=[\"#2ca02c\",\"#ff7f0e\",\"#9467bd\",\"#d62728\"])\nplt.rcParams['figure.figsize'] = (7,5)\n\ndef short_summary(model, label=None):\n    if label:\n        print(f\"=== {label} ===\")\n    df_summary = pd.DataFrame({\n        'coef': model.params,\n        'std err': model.bse,\n        't': model.tvalues,\n        'P&gt;|t|': model.pvalues\n    })\n    print(df_summary)\n    print()\n\ndata_filepath = \"karlan_list_2007.dta\"\ndf = pd.read_stata(data_filepath)\ndf_treat = df[df['treatment'] == 1]\ndf_cont  = df[df['control'] == 1]"
  },
  {
    "objectID": "blog/HW1/index.html#data",
    "href": "blog/HW1/index.html#data",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Data",
    "text": "Data\n\n\nShow/Hide Code\nprint(\"Columns:\\n\", df.columns.tolist())\nprint(\"\\nSummary statistics:\\n\", df.describe())\n\n\nColumns:\n ['treatment', 'control', 'ratio', 'ratio2', 'ratio3', 'size', 'size25', 'size50', 'size100', 'sizeno', 'ask', 'askd1', 'askd2', 'askd3', 'ask1', 'ask2', 'ask3', 'amount', 'gave', 'amountchange', 'hpa', 'ltmedmra', 'freq', 'years', 'year5', 'mrm2', 'dormant', 'female', 'couple', 'state50one', 'nonlit', 'cases', 'statecnt', 'stateresponse', 'stateresponset', 'stateresponsec', 'stateresponsetminc', 'perbush', 'close25', 'red0', 'blue0', 'redcty', 'bluecty', 'pwhite', 'pblack', 'page18_39', 'ave_hh_sz', 'median_hhincome', 'powner', 'psch_atlstba', 'pop_propurban']\n\nSummary statistics:\n           treatment       control        ratio2        ratio3        size25  \\\ncount  50083.000000  50083.000000  50083.000000  50083.000000  50083.000000   \nmean       0.666813      0.333187      0.222311      0.222211      0.166723   \nstd        0.471357      0.471357      0.415803      0.415736      0.372732   \nmin        0.000000      0.000000      0.000000      0.000000      0.000000   \n25%        0.000000      0.000000      0.000000      0.000000      0.000000   \n50%        1.000000      0.000000      0.000000      0.000000      0.000000   \n75%        1.000000      1.000000      0.000000      0.000000      0.000000   \nmax        1.000000      1.000000      1.000000      1.000000      1.000000   \n\n             size50       size100        sizeno         askd1         askd2  \\\ncount  50083.000000  50083.000000  50083.000000  50083.000000  50083.000000   \nmean       0.166623      0.166723      0.166743      0.222311      0.222291   \nstd        0.372643      0.372732      0.372750      0.415803      0.415790   \nmin        0.000000      0.000000      0.000000      0.000000      0.000000   \n25%        0.000000      0.000000      0.000000      0.000000      0.000000   \n50%        0.000000      0.000000      0.000000      0.000000      0.000000   \n75%        0.000000      0.000000      0.000000      0.000000      0.000000   \nmax        1.000000      1.000000      1.000000      1.000000      1.000000   \n\n       ...        redcty       bluecty        pwhite        pblack  \\\ncount  ...  49978.000000  49978.000000  48217.000000  48047.000000   \nmean   ...      0.510245      0.488715      0.819599      0.086710   \nstd    ...      0.499900      0.499878      0.168561      0.135868   \nmin    ...      0.000000      0.000000      0.009418      0.000000   \n25%    ...      0.000000      0.000000      0.755845      0.014729   \n50%    ...      1.000000      0.000000      0.872797      0.036554   \n75%    ...      1.000000      1.000000      0.938827      0.090882   \nmax    ...      1.000000      1.000000      1.000000      0.989622   \n\n          page18_39     ave_hh_sz  median_hhincome        powner  \\\ncount  48217.000000  48221.000000     48209.000000  48214.000000   \nmean       0.321694      2.429012     54815.700533      0.669418   \nstd        0.103039      0.378115     22027.316665      0.193405   \nmin        0.000000      0.000000      5000.000000      0.000000   \n25%        0.258311      2.210000     39181.000000      0.560222   \n50%        0.305534      2.440000     50673.000000      0.712296   \n75%        0.369132      2.660000     66005.000000      0.816798   \nmax        0.997544      5.270000    200001.000000      1.000000   \n\n       psch_atlstba  pop_propurban  \ncount  48215.000000   48217.000000  \nmean       0.391661       0.871968  \nstd        0.186599       0.258654  \nmin        0.000000       0.000000  \n25%        0.235647       0.884929  \n50%        0.373744       1.000000  \n75%        0.530036       1.000000  \nmax        1.000000       1.000000  \n\n[8 rows x 48 columns]\n\n\n\n\n\n\n\n\nVariable Definitions\n\n\n\n\n\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\ntreatment\nTreatment\n\n\ncontrol\nControl\n\n\nratio\nMatch ratio\n\n\nratio2\n2:1 match ratio\n\n\nratio3\n3:1 match ratio\n\n\nsize\nMatch threshold\n\n\nsize25\n$25,000 match threshold\n\n\nsize50\n$50,000 match threshold\n\n\nsize100\n$100,000 match threshold\n\n\nsizeno\nUnstated match threshold\n\n\nask\nSuggested donation amount\n\n\naskd1\nSuggested donation was highest previous contribution\n\n\naskd2\nSuggested donation was 1.25 x highest previous contribution\n\n\naskd3\nSuggested donation was 1.50 x highest previous contribution\n\n\nask1\nHighest previous contribution (for suggestion)\n\n\nask2\n1.25 x highest previous contribution (for suggestion)\n\n\nask3\n1.50 x highest previous contribution (for suggestion)\n\n\namount\nDollars given\n\n\ngave\nGave anything\n\n\namountchange\nChange in amount given\n\n\nhpa\nHighest previous contribution\n\n\nltmedmra\nSmall prior donor: last gift was less than median $35\n\n\nfreq\nNumber of prior donations\n\n\nyears\nNumber of years since initial donation\n\n\nyear5\nAt least 5 years since initial donation\n\n\nmrm2\nNumber of months since last donation\n\n\ndormant\nAlready donated in 2005\n\n\nfemale\nFemale\n\n\ncouple\nCouple\n\n\nstate50one\nState tag: 1 for one observation of each of 50 states; 0 otherwise\n\n\nnonlit\nNonlitigation\n\n\ncases\nCourt cases from state in 2004-5 in which organization was involved\n\n\nstatecnt\nPercent of sample from state\n\n\nstateresponse\nProportion of sample from the state who gave\n\n\nstateresponset\nProportion of treated sample from the state who gave\n\n\nstateresponsec\nProportion of control sample from the state who gave\n\n\nstateresponsetminc\nstateresponset - stateresponsec\n\n\nperbush\nState vote share for Bush\n\n\nclose25\nState vote share for Bush between 47.5% and 52.5%\n\n\nred0\nRed state\n\n\nblue0\nBlue state\n\n\nredcty\nRed county\n\n\nbluecty\nBlue county\n\n\npwhite\nProportion white within zip code\n\n\npblack\nProportion black within zip code\n\n\npage18_39\nProportion age 18-39 within zip code\n\n\nave_hh_sz\nAverage household size within zip code\n\n\nmedian_hhincome\nMedian household income within zip code\n\n\npowner\nProportion house owner within zip code\n\n\npsch_atlstba\nProportion who finished college within zip code\n\n\npop_propurban\nProportion of population urban within zip code\n\n\n\n\n\n\nInterpretation: About 50,000 observations; key columns include treatment, control, gave, amount, etc."
  },
  {
    "objectID": "blog/HW1/index.html#balance-test",
    "href": "blog/HW1/index.html#balance-test",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Balance Test",
    "text": "Balance Test\n\n\nShow/Hide Code\nmrm2_treat = df_treat['mrm2'].dropna()\nmrm2_cont  = df_cont['mrm2'].dropna()\n\nt_stat, p_val, df_deg = ttest_ind(mrm2_treat, mrm2_cont, usevar='unequal')\nprint(f\"T-test for mrm2: t={t_stat:.4f}, p={p_val:.4g}, df={df_deg:.1f}\")\n\nmodel_bal = smf.ols(\"mrm2 ~ treatment\", data=df).fit()\nshort_summary(model_bal, label=\"OLS for mrm2 on treatment\")\n\n\nT-test for mrm2: t=0.1195, p=0.9049, df=33394.5\n=== OLS for mrm2 on treatment ===\n                coef   std err           t     P&gt;|t|\nIntercept  12.998142  0.093526  138.978873  0.000000\ntreatment   0.013686  0.114534    0.119492  0.904886\n\n\n\nResult: No significant difference in mrm2, suggesting balance."
  },
  {
    "objectID": "blog/HW1/index.html#experimental-results",
    "href": "blog/HW1/index.html#experimental-results",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Experimental Results",
    "text": "Experimental Results\n\n1. Charitable Contribution Made\n\nA. Bar Plot\n\n\nShow/Hide Code\ngave_treat_mean = df_treat['gave'].mean()\ngave_cont_mean  = df_cont['gave'].mean()\nprint(\"Proportion gave - Control:\", gave_cont_mean, \"Treatment:\", gave_treat_mean)\n\n\nProportion gave - Control: 0.017858212980164198 Treatment: 0.02203856749311295\n\n\n\n\n\nBarplot_Proportion_Donors\n\n\n\n\nB. T-test & Regression\n\n\nShow/Hide Code\ngave_treat_vals = df_treat['gave']\ngave_cont_vals  = df_cont['gave']\nt_gave, p_gave, df_g = ttest_ind(gave_treat_vals, gave_cont_vals, usevar='unequal')\nprint(f\"gave T-test: t={t_gave:.4f}, p={p_gave:.4g}, df={df_g:.1f}\")\n\nmodel_gave_ols = smf.ols(\"gave ~ treatment\", data=df).fit()\nshort_summary(model_gave_ols, label=\"OLS for gave\")\n\nmodel_gave_probit = smf.probit(\"gave ~ treatment\", data=df).fit(disp=False)\nshort_summary(model_gave_probit, label=\"Probit for gave\")\n\n\ngave T-test: t=3.2095, p=0.001331, df=36576.8\n=== OLS for gave ===\n               coef   std err          t         P&gt;|t|\nIntercept  0.017858  0.001101  16.224643  4.779032e-59\ntreatment  0.004180  0.001348   3.101361  1.927403e-03\n\n=== Probit for gave ===\n               coef   std err         t     P&gt;|t|\nIntercept -2.100141  0.023316 -90.07277  0.000000\ntreatment  0.086785  0.027879   3.11293  0.001852\n\n\n\nResult: Matching grants significantly increase donation probability, though the effect size is small.\n\n\n\n2. Differences Between Match Rates\n\n\nShow/Hide Code\ngave_1to1 = df[df['ratio'] == 1]['gave']\ngave_2to1 = df[df['ratio2'] == 1]['gave']\ngave_3to1 = df[df['ratio3'] == 1]['gave']\n\nt_12, p_12, df_12 = ttest_ind(gave_1to1, gave_2to1, usevar='unequal')\nt_23, p_23, df_23 = ttest_ind(gave_2to1, gave_3to1, usevar='unequal')\nprint(f\"1:1 vs 2:1 =&gt; t={t_12:.4f}, p={p_12:.4g}\")\nprint(f\"2:1 vs 3:1 =&gt; t={t_23:.4f}, p={p_23:.4g}\")\n\nmodel_ratio = smf.ols(\"gave ~ ratio + ratio2 + ratio3\", data=df).fit()\nshort_summary(model_ratio, label=\"OLS for gave on ratio dummies\")\n\nr_1 = gave_1to1.mean()\nr_2 = gave_2to1.mean()\nr_3 = gave_3to1.mean()\nprint(\"Diff(1:1 vs 2:1):\", r_2 - r_1)\nprint(\"Diff(2:1 vs 3:1):\", r_3 - r_2)\n\n\n1:1 vs 2:1 =&gt; t=-0.9650, p=0.3345\n2:1 vs 3:1 =&gt; t=-0.0501, p=0.96\n=== OLS for gave on ratio dummies ===\n                    coef       std err          t         P&gt;|t|\nIntercept   1.802911e-02  1.386416e-03  13.004112  1.339110e-38\nratio[T.1]  2.732484e-03  1.914416e-03   1.427320  1.534940e-01\nratio[T.2] -3.535509e+10  2.437258e+11  -0.145061  8.846633e-01\nratio[T.3] -1.520186e+09  1.038114e+10  -0.146437  8.835767e-01\nratio2      3.535509e+10  2.437258e+11   0.145061  8.846633e-01\nratio3      1.520186e+09  1.038114e+10   0.146437  8.835767e-01\n\nDiff(1:1 vs 2:1): 0.0018842510217149944\nDiff(2:1 vs 3:1): 0.00010002398025293902\n\n\nResult: No evidence that higher match ratios lead to significantly greater giving.\n\n\n3. Size of Charitable Contribution\n\nA. Unconditional and Conditional\n\n\nShow/Hide Code\namt_treat = df_treat['amount'].fillna(0)\namt_cont  = df_cont['amount'].fillna(0)\nt_amt, p_amt, _ = ttest_ind(amt_treat, amt_cont, usevar='unequal')\nprint(f\"Uncond. amount T-test: t={t_amt:.4f}, p={p_amt:.4g}\")\n\nmodel_amt_ols = smf.ols(\"amount ~ treatment\", data=df).fit()\nshort_summary(model_amt_ols, label=\"OLS for unconditional 'amount'\")\n\ndf_givers = df[df['gave'] == 1]\namt_treat_g = df_givers[df_givers['treatment']==1]['amount']\namt_cont_g  = df_givers[df_givers['control'] ==1]['amount']\n\nt_amt_g, p_amt_g, _ = ttest_ind(amt_treat_g, amt_cont_g, usevar='unequal')\nprint(f\"Cond. amount T-test: t={t_amt_g:.4f}, p={p_amt_g:.4g}\")\n\nmodel_amt_cond_ols = smf.ols(\"amount ~ treatment\", data=df_givers).fit()\nshort_summary(model_amt_cond_ols, label=\"OLS for amount among donors\")\n\n\nUncond. amount T-test: t=1.9183, p=0.05509\n=== OLS for unconditional 'amount' ===\n               coef   std err          t         P&gt;|t|\nIntercept  0.813268  0.067418  12.062995  1.843438e-33\ntreatment  0.153605  0.082561   1.860503  6.282029e-02\n\nCond. amount T-test: t=-0.5846, p=0.559\n=== OLS for amount among donors ===\n                coef   std err          t         P&gt;|t|\nIntercept  45.540268  2.423378  18.792063  5.473578e-68\ntreatment  -1.668393  2.872384  -0.580839  5.614756e-01\n\n\n\nResult: Very small/unreliable difference in donation amounts.\n\n\nB. Histograms\n\n\nInterpretation: Distributions appear similar between groups."
  },
  {
    "objectID": "blog/HW1/index.html#simulation-experiments",
    "href": "blog/HW1/index.html#simulation-experiments",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Simulation Experiments",
    "text": "Simulation Experiments\n\nLaw of Large Numbers\n\n\nShow/Hide Code\nN_sims = 10000\np_c = 0.018\np_t = 0.022\n\nsim_c = np.random.binomial(1, p_c, N_sims)\nsim_t = np.random.binomial(1, p_t, N_sims)\ndiff_vec = sim_t - sim_c\ncum_avg = np.cumsum(diff_vec)/np.arange(1,N_sims+1)\n\n\n\n\n\nCumulative Average difference plot\n\n\nInterpretation: Cumulative average converges near 0.004 (the true difference in proportions).\n\n\nCentral Limit Theorem\n\n\nShow/Hide Code\ndef draw_mean_diffs(n_control, n_treatment, iters=1000):\n    out = []\n    for _ in range(iters):\n        c_draws = np.random.binomial(1, p_c, n_control)\n        t_draws = np.random.binomial(1, p_t, n_treatment)\n        out.append(t_draws.mean() - c_draws.mean())\n    return np.array(out)\n\nfor s in [50, 200, 500, 1000]:\n    diffs = draw_mean_diffs(s, s)\n\n\n\n\n\n\nInterpretation: As n increases, the sampling distribution becomes tighter and more bell-shaped."
  },
  {
    "objectID": "blog/HW1/index.html#conclusion",
    "href": "blog/HW1/index.html#conclusion",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Conclusion",
    "text": "Conclusion\nThe results replicate those of Karlan and List (2007): matching grants increase donation rates, but higher match ratios do not improve outcomes further. The average donation amount is unaffected. Simulations illustrate the LLN and CLT in practice."
  },
  {
    "objectID": "blog/HW1/index.html#full-code",
    "href": "blog/HW1/index.html#full-code",
    "title": "A Replication of Karlan and List (2007)",
    "section": "Full Code",
    "text": "Full Code\n\n\nShow/Hide Code\n# A Replication of Karlan and List (2007)\nimport numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom statsmodels.stats.weightstats import ttest_ind\nimport matplotlib.pyplot as plt\n\nplt.rcParams['axes.prop_cycle'] = plt.cycler(color=[\"#2ca02c\",\"#ff7f0e\",\"#9467bd\",\"#d62728\"])\nplt.rcParams['figure.figsize'] = (7,5)\n\ndef short_summary(model, label=None):\n    if label:\n        print(f\"=== {label} ===\")\n    df_summary = pd.DataFrame({\n        'coef': model.params,\n        'std err': model.bse,\n        't': model.tvalues,\n        'P&gt;|t|': model.pvalues\n    })\n    print(df_summary)\n    print()\n\ndata_filepath = \"karlan_list_2007.dta\"\ndf = pd.read_stata(data_filepath)\n\n# Balance Test\ndf_treat = df[df['treatment'] == 1]\ndf_cont = df[df['control'] == 1]\n\nmrm2_treat = df_treat['mrm2'].dropna()\nmrm2_cont = df_cont['mrm2'].dropna()\nt_stat, p_val, df_deg = ttest_ind(mrm2_treat, mrm2_cont, usevar='unequal')\nmodel_bal = smf.ols(\"mrm2 ~ treatment\", data=df).fit()\nshort_summary(model_bal, label=\"OLS for mrm2 on treatment\")\n\n# Charitable Contributions\ngave_treat_mean = df_treat['gave'].mean()\ngave_cont_mean = df_cont['gave'].mean()\nplt.bar([\"Control\", \"Treatment\"], [gave_cont_mean, gave_treat_mean], color=[\"#1f77b4\",\"#ff7f0e\"])\nplt.title(\"Proportion Who Donated: Control vs Treatment\")\nplt.ylabel(\"Proportion\")\nplt.show()\n\ngave_treat_vals = df_treat['gave']\ngave_cont_vals = df_cont['gave']\nt_gave, p_gave, df_g = ttest_ind(gave_treat_vals, gave_cont_vals, usevar='unequal')\nmodel_gave_ols = smf.ols(\"gave ~ treatment\", data=df).fit()\nshort_summary(model_gave_ols, label=\"OLS for gave on treatment\")\nmodel_gave_probit = smf.probit(\"gave ~ treatment\", data=df).fit(disp=False)\nshort_summary(model_gave_probit, label=\"Probit for gave on treatment\")\n\n# Match Ratios\ngave_1to1 = df[df['ratio'] == 1]['gave']\ngave_2to1 = df[df['ratio2'] == 1]['gave']\ngave_3to1 = df[df['ratio3'] == 1]['gave']\nt_12, p_12, df_12 = ttest_ind(gave_1to1, gave_2to1, usevar='unequal')\nt_23, p_23, df_23 = ttest_ind(gave_2to1, gave_3to1, usevar='unequal')\nmodel_ratio = smf.ols(\"gave ~ ratio + ratio2 + ratio3\", data=df).fit()\nshort_summary(model_ratio, label=\"OLS for gave on ratio dummies\")\nprint(\"Response rate difference, 1:1 vs 2:1 =\", (gave_2to1.mean() - gave_1to1.mean())*100)\nprint(\"Response rate difference, 2:1 vs 3:1 =\", (gave_3to1.mean() - gave_2to1.mean())*100)\n\n# Donation Amounts\namt_treat = df_treat['amount'].fillna(0)\namt_cont = df_cont['amount'].fillna(0)\nt_amt, p_amt, df_amt_ = ttest_ind(amt_treat, amt_cont, usevar='unequal')\nmodel_amt_ols = smf.ols(\"amount ~ treatment\", data=df).fit()\nshort_summary(model_amt_ols, label=\"OLS for unconditional 'amount'\")\n\ndf_givers = df[df['gave'] == 1]\namt_treat_g = df_givers[df_givers['treatment']==1]['amount']\namt_cont_g = df_givers[df_givers['control']==1]['amount']\nt_amt_g, p_amt_g, df_amt_g = ttest_ind(amt_treat_g, amt_cont_g, usevar='unequal')\nmodel_amt_cond_ols = smf.ols(\"amount ~ treatment\", data=df_givers).fit()\nshort_summary(model_amt_cond_ols, label=\"OLS for amount among donors\")\n\n# Histograms\nmean_treat_g = amt_treat_g.mean()\nmean_cont_g = amt_cont_g.mean()\n\nplt.hist(amt_treat_g, bins=30, color=\"#9467bd\")\nplt.axvline(mean_treat_g, color='red', linestyle='--', linewidth=2)\nplt.title(\"Histogram: Donation Amounts (Treatment donors)\")\nplt.xlabel(\"Donation Amount\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\nplt.hist(amt_cont_g, bins=30, color=\"#d62728\")\nplt.axvline(mean_cont_g, color='red', linestyle='--', linewidth=2)\nplt.title(\"Histogram: Donation Amounts (Control donors)\")\nplt.xlabel(\"Donation Amount\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\n# LLN Simulation\nN_sims = 10000\np_c = 0.018\np_t = 0.022\nsim_c = np.random.binomial(1, p_c, size=N_sims)\nsim_t = np.random.binomial(1, p_t, size=N_sims)\ndiff_vec = sim_t - sim_c\ncum_avg = np.cumsum(diff_vec) / np.arange(1, N_sims+1)\n\nplt.plot(cum_avg, color=\"#2ca02c\")\nplt.axhline(y=(p_t - p_c), color='red', linestyle='--')\nplt.title(\"Cumulative Average of Differences (Treatment - Control)\")\nplt.xlabel(\"Number of draws\")\nplt.ylabel(\"Cumulative average difference\")\nplt.show()\n\n# CLT Simulation\ndef draw_mean_diffs(n_control, n_treatment, iters=1000):\n    out = []\n    for _ in range(iters):\n        c_draws = np.random.binomial(1, p_c, size=n_control)\n        t_draws = np.random.binomial(1, p_t, size=n_treatment)\n        out.append(t_draws.mean() - c_draws.mean())\n    return np.array(out)\n\nfor s in [50, 200, 500, 1000]:\n    diffs_s = draw_mean_diffs(s, s)\n    plt.hist(diffs_s, bins=30, color=\"#ff7f0e\", alpha=0.8)\n    plt.axvline(0, color='black', linestyle='--')\n    plt.title(f\"Histogram of Differences (n={s}, 1000 reps)\")\n    plt.xlabel(\"Difference in means (treat - control)\")\n    plt.ylabel(\"Frequency\")\n    plt.show()"
  },
  {
    "objectID": "blog/HW2/index.html",
    "href": "blog/HW2/index.html",
    "title": "This is Project 2",
    "section": "",
    "text": "I cleaned some data\n\n\n\nI analyzed the data."
  },
  {
    "objectID": "blog/HW2/index.html#section-1-data",
    "href": "blog/HW2/index.html#section-1-data",
    "title": "This is Project 2",
    "section": "",
    "text": "I cleaned some data"
  },
  {
    "objectID": "blog/HW2/index.html#section-2-analysis",
    "href": "blog/HW2/index.html#section-2-analysis",
    "title": "This is Project 2",
    "section": "",
    "text": "I analyzed the data."
  }
]