---
title: "A Replication of Karlan and List (2007)"
author: "Idris Huang"
date: "Apr 23, 2025"
format: 
  html:
    code-fold: true
    code-summary: "Show/Hide Code"
    toc: true
    toc-depth: 2
execute: 
  echo: true
  eval: false 
  freeze: true
---

## Introduction

Dean Karlan and John List (2007) carried out a natural field experiment to investigate the effectiveness of different matching grant rates (1:1, 2:1, and 3:1) in charitable fundraising. In this work, I replicated and discussed some key results:

- Checking randomization balance  
- Estimating the effect of any matching grant on donation probability  
- Comparing different match ratios  
- Examining the size of donations  
- Demonstrating the Law of Large Numbers (LLN) and Central Limit Theorem (CLT) with simulations

```{python}
#| echo: true
#| eval: false 

import numpy as np
import pandas as pd
import statsmodels.api as sm
import statsmodels.formula.api as smf
from statsmodels.stats.weightstats import ttest_ind
import matplotlib.pyplot as plt

plt.rcParams['axes.prop_cycle'] = plt.cycler(color=["#2ca02c","#ff7f0e","#9467bd","#d62728"])
plt.rcParams['figure.figsize'] = (7,5)

def short_summary(model, label=None):
    if label:
        print(f"=== {label} ===")
    df_summary = pd.DataFrame({
        'coef': model.params,
        'std err': model.bse,
        't': model.tvalues,
        'P>|t|': model.pvalues
    })
    print(df_summary)
    print()

data_filepath = "karlan_list_2007.dta"
df = pd.read_stata(data_filepath)
df_treat = df[df['treatment'] == 1]
df_cont  = df[df['control'] == 1]
```

## Data

```{python}
#| echo: true
#| eval: false 

print("Columns:\n", df.columns.tolist())
print("\nSummary statistics:\n", df.describe())
```

:::: {.callout-note collapse="true"}
### Variable Definitions

| Variable             | Description                                                         |
|----------------------|---------------------------------------------------------------------|
| `treatment`          | Treatment                                                           |
| `control`            | Control                                                             |
| `ratio`              | Match ratio                                                         |
| `ratio2`             | 2:1 match ratio                                                     |
| `ratio3`             | 3:1 match ratio                                                     |
| `size`               | Match threshold                                                     |
| `size25`             | \$25,000 match threshold                                            |
| `size50`             | \$50,000 match threshold                                            |
| `size100`            | \$100,000 match threshold                                           |
| `sizeno`             | Unstated match threshold                                            |
| `ask`                | Suggested donation amount                                           |
| `askd1`              | Suggested donation was highest previous contribution                |
| `askd2`              | Suggested donation was 1.25 x highest previous contribution         |
| `askd3`              | Suggested donation was 1.50 x highest previous contribution         |
| `ask1`               | Highest previous contribution (for suggestion)                      |
| `ask2`               | 1.25 x highest previous contribution (for suggestion)               |
| `ask3`               | 1.50 x highest previous contribution (for suggestion)               |
| `amount`             | Dollars given                                                       |
| `gave`               | Gave anything                                                       |
| `amountchange`       | Change in amount given                                              |
| `hpa`                | Highest previous contribution                                       |
| `ltmedmra`           | Small prior donor: last gift was less than median \$35              |
| `freq`               | Number of prior donations                                           |
| `years`              | Number of years since initial donation                              |
| `year5`              | At least 5 years since initial donation                             |
| `mrm2`               | Number of months since last donation                                |
| `dormant`            | Already donated in 2005                                             |
| `female`             | Female                                                              |
| `couple`             | Couple                                                              |
| `state50one`         | State tag: 1 for one observation of each of 50 states; 0 otherwise  |
| `nonlit`             | Nonlitigation                                                       |
| `cases`              | Court cases from state in 2004-5 in which organization was involved |
| `statecnt`           | Percent of sample from state                                        |
| `stateresponse`      | Proportion of sample from the state who gave                        |
| `stateresponset`     | Proportion of treated sample from the state who gave                |
| `stateresponsec`     | Proportion of control sample from the state who gave                |
| `stateresponsetminc` | stateresponset - stateresponsec                                     |
| `perbush`            | State vote share for Bush                                           |
| `close25`            | State vote share for Bush between 47.5% and 52.5%                   |
| `red0`               | Red state                                                           |
| `blue0`              | Blue state                                                          |
| `redcty`             | Red county                                                          |
| `bluecty`            | Blue county                                                         |
| `pwhite`             | Proportion white within zip code                                    |
| `pblack`             | Proportion black within zip code                                    |
| `page18_39`          | Proportion age 18-39 within zip code                                |
| `ave_hh_sz`          | Average household size within zip code                              |
| `median_hhincome`    | Median household income within zip code                             |
| `powner`             | Proportion house owner within zip code                              |
| `psch_atlstba`       | Proportion who finished college within zip code                     |
| `pop_propurban`      | Proportion of population urban within zip code                      |

::::

**Interpretation:** About 50,000 observations; key columns include `treatment`, `control`, `gave`, `amount`, etc.

## Balance Test

```{python}
#| echo: true
#| eval: false 

mrm2_treat = df_treat['mrm2'].dropna()
mrm2_cont  = df_cont['mrm2'].dropna()

t_stat, p_val, df_deg = ttest_ind(mrm2_treat, mrm2_cont, usevar='unequal')
print(f"T-test for mrm2: t={t_stat:.4f}, p={p_val:.4g}, df={df_deg:.1f}")

model_bal = smf.ols("mrm2 ~ treatment", data=df).fit()
short_summary(model_bal, label="OLS for mrm2 on treatment")
```

**Result:** No significant difference in `mrm2`, suggesting balance.

## Experimental Results

### 1. Charitable Contribution Made

#### A. Bar Plot

```{python}
#| echo: true
#| eval: false 

gave_treat_mean = df_treat['gave'].mean()
gave_cont_mean  = df_cont['gave'].mean()
print("Proportion gave - Control:", gave_cont_mean, "Treatment:", gave_treat_mean)
```

![Barplot_Proportion_Donors](barplot.png)

#### B. T-test & Regression

```{python}
#| echo: true
#| eval: false 

gave_treat_vals = df_treat['gave']
gave_cont_vals  = df_cont['gave']
t_gave, p_gave, df_g = ttest_ind(gave_treat_vals, gave_cont_vals, usevar='unequal')
print(f"gave T-test: t={t_gave:.4f}, p={p_gave:.4g}, df={df_g:.1f}")

model_gave_ols = smf.ols("gave ~ treatment", data=df).fit()
short_summary(model_gave_ols, label="OLS for gave")

model_gave_probit = smf.probit("gave ~ treatment", data=df).fit(disp=False)
short_summary(model_gave_probit, label="Probit for gave")
```

**Result:** Matching grants significantly increase donation probability, though the effect size is small.

### 2. Differences Between Match Rates

```{python}
#| echo: true
#| eval: false 

gave_1to1 = df[df['ratio'] == 1]['gave']
gave_2to1 = df[df['ratio2'] == 1]['gave']
gave_3to1 = df[df['ratio3'] == 1]['gave']

t_12, p_12, df_12 = ttest_ind(gave_1to1, gave_2to1, usevar='unequal')
t_23, p_23, df_23 = ttest_ind(gave_2to1, gave_3to1, usevar='unequal')
print(f"1:1 vs 2:1 => t={t_12:.4f}, p={p_12:.4g}")
print(f"2:1 vs 3:1 => t={t_23:.4f}, p={p_23:.4g}")

model_ratio = smf.ols("gave ~ ratio + ratio2 + ratio3", data=df).fit()
short_summary(model_ratio, label="OLS for gave on ratio dummies")

r_1 = gave_1to1.mean()
r_2 = gave_2to1.mean()
r_3 = gave_3to1.mean()
print("Diff(1:1 vs 2:1):", r_2 - r_1)
print("Diff(2:1 vs 3:1):", r_3 - r_2)
```

**Result:** No evidence that higher match ratios lead to significantly greater giving.

### 3. Size of Charitable Contribution

#### A. Unconditional and Conditional

```{python}
#| echo: true
#| eval: false 

amt_treat = df_treat['amount'].fillna(0)
amt_cont  = df_cont['amount'].fillna(0)
t_amt, p_amt, _ = ttest_ind(amt_treat, amt_cont, usevar='unequal')
print(f"Uncond. amount T-test: t={t_amt:.4f}, p={p_amt:.4g}")

model_amt_ols = smf.ols("amount ~ treatment", data=df).fit()
short_summary(model_amt_ols, label="OLS for unconditional 'amount'")

df_givers = df[df['gave'] == 1]
amt_treat_g = df_givers[df_givers['treatment']==1]['amount']
amt_cont_g  = df_givers[df_givers['control'] ==1]['amount']

t_amt_g, p_amt_g, _ = ttest_ind(amt_treat_g, amt_cont_g, usevar='unequal')
print(f"Cond. amount T-test: t={t_amt_g:.4f}, p={p_amt_g:.4g}")

model_amt_cond_ols = smf.ols("amount ~ treatment", data=df_givers).fit()
short_summary(model_amt_cond_ols, label="OLS for amount among donors")
```

**Result:** Very small/unreliable difference in donation amounts.

#### B. Histograms

![Donation amounts, treatment donors](hist_treatment.png)  
![Donation amounts, control donors](hist_control.png)

**Interpretation:** Distributions appear similar between groups.

## Simulation Experiments

### Law of Large Numbers

```{python}
#| echo: true
#| eval: false 

N_sims = 10000
p_c = 0.018
p_t = 0.022

sim_c = np.random.binomial(1, p_c, N_sims)
sim_t = np.random.binomial(1, p_t, N_sims)
diff_vec = sim_t - sim_c
cum_avg = np.cumsum(diff_vec)/np.arange(1,N_sims+1)
```

![Cumulative Average difference plot](LLN.png)

**Interpretation:** Cumulative average converges near 0.004 (the true difference in proportions).

### Central Limit Theorem

```{python}
#| echo: true
#| eval: false 

def draw_mean_diffs(n_control, n_treatment, iters=1000):
    out = []
    for _ in range(iters):
        c_draws = np.random.binomial(1, p_c, n_control)
        t_draws = np.random.binomial(1, p_t, n_treatment)
        out.append(t_draws.mean() - c_draws.mean())
    return np.array(out)

for s in [50, 200, 500, 1000]:
    diffs = draw_mean_diffs(s, s)
```

![CLT Hist n=50](CLT_50.png)  
![CLT Hist n=200](CLT_200.png)  
![CLT Hist n=500](CLT_500.png)  
![CLT Hist n=1000](CLT_1000.png)

**Interpretation:** As `n` increases, the sampling distribution becomes tighter and more bell-shaped.

## Conclusion

The results replicate those of Karlan and List (2007): matching grants increase donation rates, but higher match ratios do not improve outcomes further. The average donation amount is unaffected. Simulations illustrate the LLN and CLT in practice.

## Full Code

```{python}
#| echo: true
#| eval: false 

## Full Code

```python
# A Replication of Karlan and List (2007)
import numpy as np
import pandas as pd
import statsmodels.api as sm
import statsmodels.formula.api as smf
from statsmodels.stats.weightstats import ttest_ind
import matplotlib.pyplot as plt

plt.rcParams['axes.prop_cycle'] = plt.cycler(color=["#2ca02c","#ff7f0e","#9467bd","#d62728"])
plt.rcParams['figure.figsize'] = (7,5)

def short_summary(model, label=None):
    if label:
        print(f"=== {label} ===")
    df_summary = pd.DataFrame({
        'coef': model.params,
        'std err': model.bse,
        't': model.tvalues,
        'P>|t|': model.pvalues
    })
    print(df_summary)
    print()

data_filepath = "karlan_list_2007.dta"
df = pd.read_stata(data_filepath)

# Balance Test
df_treat = df[df['treatment'] == 1]
df_cont = df[df['control'] == 1]

mrm2_treat = df_treat['mrm2'].dropna()
mrm2_cont = df_cont['mrm2'].dropna()
t_stat, p_val, df_deg = ttest_ind(mrm2_treat, mrm2_cont, usevar='unequal')
model_bal = smf.ols("mrm2 ~ treatment", data=df).fit()
short_summary(model_bal, label="OLS for mrm2 on treatment")

# Charitable Contributions
gave_treat_mean = df_treat['gave'].mean()
gave_cont_mean = df_cont['gave'].mean()
plt.bar(["Control", "Treatment"], [gave_cont_mean, gave_treat_mean], color=["#1f77b4","#ff7f0e"])
plt.title("Proportion Who Donated: Control vs Treatment")
plt.ylabel("Proportion")
plt.show()

gave_treat_vals = df_treat['gave']
gave_cont_vals = df_cont['gave']
t_gave, p_gave, df_g = ttest_ind(gave_treat_vals, gave_cont_vals, usevar='unequal')
model_gave_ols = smf.ols("gave ~ treatment", data=df).fit()
short_summary(model_gave_ols, label="OLS for gave on treatment")
model_gave_probit = smf.probit("gave ~ treatment", data=df).fit(disp=False)
short_summary(model_gave_probit, label="Probit for gave on treatment")

# Match Ratios
gave_1to1 = df[df['ratio'] == 1]['gave']
gave_2to1 = df[df['ratio2'] == 1]['gave']
gave_3to1 = df[df['ratio3'] == 1]['gave']
t_12, p_12, df_12 = ttest_ind(gave_1to1, gave_2to1, usevar='unequal')
t_23, p_23, df_23 = ttest_ind(gave_2to1, gave_3to1, usevar='unequal')
model_ratio = smf.ols("gave ~ ratio + ratio2 + ratio3", data=df).fit()
short_summary(model_ratio, label="OLS for gave on ratio dummies")
print("Response rate difference, 1:1 vs 2:1 =", (gave_2to1.mean() - gave_1to1.mean())*100)
print("Response rate difference, 2:1 vs 3:1 =", (gave_3to1.mean() - gave_2to1.mean())*100)

# Donation Amounts
amt_treat = df_treat['amount'].fillna(0)
amt_cont = df_cont['amount'].fillna(0)
t_amt, p_amt, df_amt_ = ttest_ind(amt_treat, amt_cont, usevar='unequal')
model_amt_ols = smf.ols("amount ~ treatment", data=df).fit()
short_summary(model_amt_ols, label="OLS for unconditional 'amount'")

df_givers = df[df['gave'] == 1]
amt_treat_g = df_givers[df_givers['treatment']==1]['amount']
amt_cont_g = df_givers[df_givers['control']==1]['amount']
t_amt_g, p_amt_g, df_amt_g = ttest_ind(amt_treat_g, amt_cont_g, usevar='unequal')
model_amt_cond_ols = smf.ols("amount ~ treatment", data=df_givers).fit()
short_summary(model_amt_cond_ols, label="OLS for amount among donors")

# Histograms
mean_treat_g = amt_treat_g.mean()
mean_cont_g = amt_cont_g.mean()

plt.hist(amt_treat_g, bins=30, color="#9467bd")
plt.axvline(mean_treat_g, color='red', linestyle='--', linewidth=2)
plt.title("Histogram: Donation Amounts (Treatment donors)")
plt.xlabel("Donation Amount")
plt.ylabel("Frequency")
plt.show()

plt.hist(amt_cont_g, bins=30, color="#d62728")
plt.axvline(mean_cont_g, color='red', linestyle='--', linewidth=2)
plt.title("Histogram: Donation Amounts (Control donors)")
plt.xlabel("Donation Amount")
plt.ylabel("Frequency")
plt.show()

# LLN Simulation
N_sims = 10000
p_c = 0.018
p_t = 0.022
sim_c = np.random.binomial(1, p_c, size=N_sims)
sim_t = np.random.binomial(1, p_t, size=N_sims)
diff_vec = sim_t - sim_c
cum_avg = np.cumsum(diff_vec) / np.arange(1, N_sims+1)

plt.plot(cum_avg, color="#2ca02c")
plt.axhline(y=(p_t - p_c), color='red', linestyle='--')
plt.title("Cumulative Average of Differences (Treatment - Control)")
plt.xlabel("Number of draws")
plt.ylabel("Cumulative average difference")
plt.show()

# CLT Simulation
def draw_mean_diffs(n_control, n_treatment, iters=1000):
    out = []
    for _ in range(iters):
        c_draws = np.random.binomial(1, p_c, size=n_control)
        t_draws = np.random.binomial(1, p_t, size=n_treatment)
        out.append(t_draws.mean() - c_draws.mean())
    return np.array(out)

for s in [50, 200, 500, 1000]:
    diffs_s = draw_mean_diffs(s, s)
    plt.hist(diffs_s, bins=30, color="#ff7f0e", alpha=0.8)
    plt.axvline(0, color='black', linestyle='--')
    plt.title(f"Histogram of Differences (n={s}, 1000 reps)")
    plt.xlabel("Difference in means (treat - control)")
    plt.ylabel("Frequency")
    plt.show()
```



