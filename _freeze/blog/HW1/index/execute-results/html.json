{
  "hash": "295afc3e5b48487b2b644fea89fe94a0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"A Replication of Karlan and List (2007)\"\nauthor: \"Idris Huang\"\ndate: \"Apr 23, 2025\"\nformat: \n  html:\n    code-fold: true\n    code-summary: \"Show/Hide Code\"\n    toc: true\n    toc-depth: 2\nexecute: \n  echo: true\n  eval: false\n  freeze: true\n---\n\n## Introduction\n\nDean Karlan and John List (2007) carried out a natural field experiment to investigate the effectiveness of different matching grant rates (1:1, 2:1, and 3:1) in charitable fundraising. In this homework, we replicate and discuss some key results:\n\n- Checking randomization balance  \n- Estimating the effect of any matching grant on donation probability  \n- Comparing different match ratios  \n- Examining the size of donations  \n- Demonstrating the Law of Large Numbers (LLN) and Central Limit Theorem (CLT) with simulations\n\nBelow is a condensed Quarto file. I removed non-essential instructions, provided result interpretations, and only showed essential code. Parts of the code are hidden to keep the final document concise.\n\n::: {#3514d260 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom statsmodels.stats.weightstats import ttest_ind\nimport matplotlib.pyplot as plt\n\nplt.rcParams['axes.prop_cycle'] = plt.cycler(color=[\"#2ca02c\",\"#ff7f0e\",\"#9467bd\",\"#d62728\"])\nplt.rcParams['figure.figsize'] = (7,5)\n\ndef short_summary(model, label=None):\n    if label:\n        print(f\"=== {label} ===\")\n    df_summary = pd.DataFrame({\n        'coef': model.params,\n        'std err': model.bse,\n        't': model.tvalues,\n        'P>|t|': model.pvalues\n    })\n    print(df_summary)\n    print()\n\ndata_filepath = \"karlan_list_2007.dta\"\ndf = pd.read_stata(data_filepath)\ndf_treat = df[df['treatment'] == 1]\ndf_cont  = df[df['control'] == 1]\n```\n:::\n\n\n## Data\n\n::: {#66ea6305 .cell execution_count=2}\n``` {.python .cell-code}\nprint(\"Columns:\\n\", df.columns.tolist())\nprint(\"\\nSummary statistics:\\n\", df.describe())\n```\n:::\n\n\n**Interpretation:** About 50,000 observations; key columns include `treatment`, `control`, `gave`, `amount`, etc.\n\n## Balance Test\n\n::: {#7812de1e .cell execution_count=3}\n``` {.python .cell-code}\nmrm2_treat = df_treat['mrm2'].dropna()\nmrm2_cont  = df_cont['mrm2'].dropna()\n\nt_stat, p_val, df_deg = ttest_ind(mrm2_treat, mrm2_cont, usevar='unequal')\nprint(f\"T-test for mrm2: t={t_stat:.4f}, p={p_val:.4g}, df={df_deg:.1f}\")\n\nmodel_bal = smf.ols(\"mrm2 ~ treatment\", data=df).fit()\nshort_summary(model_bal, label=\"OLS for mrm2 on treatment\")\n```\n:::\n\n\n**Result:** No significant difference in `mrm2`, suggesting balance.\n\n## Experimental Results\n\n### 1. Charitable Contribution Made\n\n#### A. Bar Plot\n\n::: {#ff4dc3a3 .cell execution_count=4}\n``` {.python .cell-code}\ngave_treat_mean = df_treat['gave'].mean()\ngave_cont_mean  = df_cont['gave'].mean()\nprint(\"Proportion gave - Control:\", gave_cont_mean, \"Treatment:\", gave_treat_mean)\n```\n:::\n\n\n![Barplot_Proportion_Donors](barplot.png)\n\n#### B. T-test & Regression\n\n::: {#68d1222f .cell execution_count=5}\n``` {.python .cell-code}\ngave_treat_vals = df_treat['gave']\ngave_cont_vals  = df_cont['gave']\nt_gave, p_gave, df_g = ttest_ind(gave_treat_vals, gave_cont_vals, usevar='unequal')\nprint(f\"gave T-test: t={t_gave:.4f}, p={p_gave:.4g}, df={df_g:.1f}\")\n\nmodel_gave_ols = smf.ols(\"gave ~ treatment\", data=df).fit()\nshort_summary(model_gave_ols, label=\"OLS for gave\")\n\nmodel_gave_probit = smf.probit(\"gave ~ treatment\", data=df).fit(disp=False)\nshort_summary(model_gave_probit, label=\"Probit for gave\")\n```\n:::\n\n\n**Result:** Matching grants significantly increase donation probability, though the effect size is small.\n\n### 2. Differences Between Match Rates\n\n::: {#dbd516ff .cell execution_count=6}\n``` {.python .cell-code}\ngave_1to1 = df[df['ratio'] == 1]['gave']\ngave_2to1 = df[df['ratio2'] == 1]['gave']\ngave_3to1 = df[df['ratio3'] == 1]['gave']\n\nt_12, p_12, df_12 = ttest_ind(gave_1to1, gave_2to1, usevar='unequal')\nt_23, p_23, df_23 = ttest_ind(gave_2to1, gave_3to1, usevar='unequal')\nprint(f\"1:1 vs 2:1 => t={t_12:.4f}, p={p_12:.4g}\")\nprint(f\"2:1 vs 3:1 => t={t_23:.4f}, p={p_23:.4g}\")\n\nmodel_ratio = smf.ols(\"gave ~ ratio + ratio2 + ratio3\", data=df).fit()\nshort_summary(model_ratio, label=\"OLS for gave on ratio dummies\")\n\nr_1 = gave_1to1.mean()\nr_2 = gave_2to1.mean()\nr_3 = gave_3to1.mean()\nprint(\"Diff(1:1 vs 2:1):\", r_2 - r_1)\nprint(\"Diff(2:1 vs 3:1):\", r_3 - r_2)\n```\n:::\n\n\n**Result:** No evidence that higher match ratios lead to significantly greater giving.\n\n### 3. Size of Charitable Contribution\n\n#### A. Unconditional and Conditional\n\n::: {#449ee24f .cell execution_count=7}\n``` {.python .cell-code}\namt_treat = df_treat['amount'].fillna(0)\namt_cont  = df_cont['amount'].fillna(0)\nt_amt, p_amt, _ = ttest_ind(amt_treat, amt_cont, usevar='unequal')\nprint(f\"Uncond. amount T-test: t={t_amt:.4f}, p={p_amt:.4g}\")\n\nmodel_amt_ols = smf.ols(\"amount ~ treatment\", data=df).fit()\nshort_summary(model_amt_ols, label=\"OLS for unconditional 'amount'\")\n\ndf_givers = df[df['gave'] == 1]\namt_treat_g = df_givers[df_givers['treatment']==1]['amount']\namt_cont_g  = df_givers[df_givers['control'] ==1]['amount']\n\nt_amt_g, p_amt_g, _ = ttest_ind(amt_treat_g, amt_cont_g, usevar='unequal')\nprint(f\"Cond. amount T-test: t={t_amt_g:.4f}, p={p_amt_g:.4g}\")\n\nmodel_amt_cond_ols = smf.ols(\"amount ~ treatment\", data=df_givers).fit()\nshort_summary(model_amt_cond_ols, label=\"OLS for amount among donors\")\n```\n:::\n\n\n**Result:** Very small/unreliable difference in donation amounts.\n\n#### B. Histograms\n\n![Donation amounts, treatment donors](hist_treatment.png)  \n![Donation amounts, control donors](hist_control.png)\n\n**Interpretation:** Distributions appear similar between groups.\n\n## Simulation Experiments\n\n### Law of Large Numbers\n\n::: {#c1ad8e58 .cell execution_count=8}\n``` {.python .cell-code}\nN_sims = 10000\np_c = 0.018\np_t = 0.022\n\nsim_c = np.random.binomial(1, p_c, N_sims)\nsim_t = np.random.binomial(1, p_t, N_sims)\ndiff_vec = sim_t - sim_c\ncum_avg = np.cumsum(diff_vec)/np.arange(1,N_sims+1)\n```\n:::\n\n\n![Cumulative Average difference plot](LLN.png)\n\n**Interpretation:** Cumulative average converges near 0.004 (the true difference in proportions).\n\n### Central Limit Theorem\n\n::: {#52827c72 .cell execution_count=9}\n``` {.python .cell-code}\ndef draw_mean_diffs(n_control, n_treatment, iters=1000):\n    out = []\n    for _ in range(iters):\n        c_draws = np.random.binomial(1, p_c, n_control)\n        t_draws = np.random.binomial(1, p_t, n_treatment)\n        out.append(t_draws.mean() - c_draws.mean())\n    return np.array(out)\n\nfor s in [50, 200, 500, 1000]:\n    diffs = draw_mean_diffs(s, s)\n```\n:::\n\n\n![CLT Hist n=50](CLT_50.png)  \n![CLT Hist n=200](CLT_200.png)  \n![CLT Hist n=500](CLT_500.png)  \n![CLT Hist n=1000](CLT_1000.png)\n\n**Interpretation:** As `n` increases, the sampling distribution becomes tighter and more bell-shaped.\n\n## Conclusion\n\nOur results replicate those of Karlan and List (2007): matching grants increase donation rates, but higher match ratios do not improve outcomes further. The average donation amount is unaffected. Simulations illustrate the LLN and CLT in practice.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}