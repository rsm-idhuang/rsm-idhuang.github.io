{
  "hash": "8e0efabba13e6efc7c64216b96f837e9",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Poisson Regression Examples\"\nauthor: \"Idris Huang\"\ndate: May 7, 2025\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show/Hide Code\"\n    toc: true\n    toc-depth: 2\nexecute:\n  echo: true\n  eval: true\n  freeze: true\ncallout-appearance: minimal\n---\n\n## Blueprinty Case Study\n\n### Introduction\n\nBlueprinty is a small firm that makes software for developing blueprints specifically for submitting patent applications to the US patent office. Their marketing team would like to make the claim that patent applicants using Blueprinty’s software are more successful in getting their patent applications approved. Ideal data to study such an effect might include the success rate of patent applications **before** using Blueprinty’s software and **after** using it. Unfortunately, such data is not available.  \n\nHowever, Blueprinty has collected data on **1,500 mature (non-startup) engineering firms**. The data include each firm’s number of patents awarded over the last five years, regional location, age since incorporation, and whether or not the firm uses Blueprinty’s software. The marketing team would like to use this data to make the claim that firms using Blueprinty’s software are more successful in getting their patent applications approved.  \n\nBlueprinty customers are not selected at random. It may be important to account for systematic differences in the age and regional location of customers vs non-customers.\n\n### Setup\n\n::: {#0729713f .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom scipy.special import gammaln\nfrom scipy.optimize import minimize\nfrom scipy.stats import norm\n```\n:::\n\n\n### Data\n\n::: {#e2962bdd .cell execution_count=2}\n``` {.python .cell-code}\nblue = (pd.read_csv(\"blueprinty.csv\")\n          .replace([np.inf, -np.inf], np.nan)\n          .dropna(subset=[\"patents\", \"age\", \"region\", \"iscustomer\"]))\nblue[\"age2\"] = blue[\"age\"]**2\n\nprint(\"--- Patents by customer status ---\")\nprint(blue.groupby(\"iscustomer\")[\"patents\"].describe()[[\"mean\",\"std\"]])\nprint(\"\\n--- Age by customer status ---\")\nprint(blue.groupby(\"iscustomer\")[\"age\"].describe()[[\"mean\",\"std\",\"min\",\"max\"]])\nprint(\"\\n--- Region shares ---\")\nprint(pd.crosstab(blue[\"region\"], blue[\"iscustomer\"], normalize=\"columns\").round(3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n--- Patents by customer status ---\n                mean       std\niscustomer                    \n0           3.473013  2.225060\n1           4.133056  2.546846\n\n--- Age by customer status ---\n                 mean       std   min   max\niscustomer                                 \n0           26.101570  6.945426   9.0  47.5\n1           26.900208  7.814678  10.0  49.0\n\n--- Region shares ---\niscustomer      0      1\nregion                  \nMidwest     0.184  0.077\nNortheast   0.268  0.682\nNorthwest   0.155  0.060\nSouth       0.153  0.073\nSouthwest   0.240  0.108\n```\n:::\n:::\n\n\n::: {#3de860ec .cell execution_count=3}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\nfor cust, grp in blue.groupby(\"iscustomer\"):\n    ax.hist(grp[\"patents\"],\n            bins=np.arange(grp[\"patents\"].max()+2)-0.5,\n            alpha=0.6, label=f\"Customer = {cust}\")\nax.set(title=\"Patent Count by Customer Status\",\n       xlabel=\"Patents (last 5 yrs)\", ylabel=\"Frequency\")\nax.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=593 height=449}\n:::\n:::\n\n\n### Estimation of Simple Poisson Model\n\nSince our outcome variable of interest can only be small integer values per a set unit of time, we can use a Poisson density to model the number of patents awarded to each engineering firm over the last five years. We start by estimating a simple Poisson model via Maximum Likelihood.\n\n::: {#b55835c1 .cell execution_count=4}\n``` {.python .cell-code}\nY = blue[\"patents\"].astype(int).to_numpy()\n\ndef nll(lmbda):\n    l = lmbda[0]\n    return np.inf if l<=0 else -(Y*np.log(l)-l-gammaln(Y+1)).sum()\n\nλ_grid = np.linspace(0.1, Y.mean()*3, 400)\nll_vals = [-nll([g]) for g in λ_grid]\n\nplt.plot(λ_grid, ll_vals)\nplt.axvline(Y.mean(), ls=\"--\", label=r\"$\\bar{Y}$\")\nplt.title(\"Log-likelihood for λ (Simple Poisson)\")\nplt.xlabel(\"λ\"); plt.ylabel(\"Log-likelihood\"); plt.legend()\nplt.show()\n\nmle = minimize(nll, [Y.mean()], bounds=[(1e-9,None)])\nprint(\"MLE λ̂ =\", round(mle.x[0], 4))\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=621 height=449}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nMLE λ̂ = 3.6847\n```\n:::\n:::\n\n\n### Estimation of Poisson Regression Model\n\nNext, we extend our simple Poisson model to a Poisson Regression Model such that $Y_i \\sim \\text{Poisson}(\\lambda_i)$ where $\\lambda_i=\\exp(X_i'\\beta)$. The interpretation is that the success rate of patent awards is not constant across all firms ($\\lambda$) but rather is a function of firm characteristics $X_i$. Specifically, we use the covariates **age, age squared, region**, and whether the firm **is a customer** of Blueprinty.\n\n::: {#b92c6304 .cell execution_count=5}\n``` {.python .cell-code}\nglm_blue = smf.glm(\"patents ~ age + age2 + C(region) + iscustomer\",\n                   data=blue, family=sm.families.Poisson()).fit()\nprint(glm_blue.summary2().tables[1][[\"Coef.\",\"Std.Err.\",\"z\",\"P>|z|\"]].round(4))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         Coef.  Std.Err.        z   P>|z|\nIntercept              -0.5089    0.1832  -2.7783  0.0055\nC(region)[T.Northeast]  0.0292    0.0436   0.6686  0.5037\nC(region)[T.Northwest] -0.0176    0.0538  -0.3268  0.7438\nC(region)[T.South]      0.0566    0.0527   1.0740  0.2828\nC(region)[T.Southwest]  0.0506    0.0472   1.0716  0.2839\nage                     0.1486    0.0139  10.7162  0.0000\nage2                   -0.0030    0.0003 -11.5132  0.0000\niscustomer              0.2076    0.0309   6.7192  0.0000\n```\n:::\n:::\n\n\n::: {#59c08e1a .cell execution_count=6}\n``` {.python .cell-code}\nmu_no  = glm_blue.predict(blue.assign(iscustomer=0))\nmu_yes = glm_blue.predict(blue.assign(iscustomer=1))\nprint(\"Average predicted Δ patents if all became customers:\",\n      round((mu_yes-mu_no).mean(),3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAverage predicted Δ patents if all became customers: 0.793\n```\n:::\n:::\n\n\n*Interpretation:* The customer coefficient β̂ ≈ 0.208 (p < 0.001) implies Blueprinty users file **≈ 23 %** more patents; the average predicted gain is **0.79 patents** over five years.\n\n---\n\n## AirBnB Case Study\n\n### Introduction\n\nAirBnB is a popular platform for booking short-term rentals. In March 2017, students Annika Awad, Evan Lebo, and Anna Linden scraped 40 000 Airbnb listings from New York City. The data include the following variables:\n\n:::: {.callout-note collapse=\"true\"}\n### Variable Definitions\n- `id` – unique ID number for each unit  \n- `last_scraped`, `host_since`, `days` – listing age variables  \n- `room_type` – Entire home/apt, Private room, Shared room  \n- `bathrooms`, `bedrooms` – amenities  \n- `price` – nightly price (USD)  \n- `number_of_reviews` – proxy for bookings  \n- `review_scores_cleanliness`, `review_scores_location`, `review_scores_value` – 1-10 ratings  \n- `instant_bookable` – `\"t\"` if instantly bookable\n::::\n\n### Data\n\n::: {#d8aad8df .cell execution_count=7}\n``` {.python .cell-code}\nair = (pd.read_csv(\"airbnb.csv\")\n         .assign(instant_bookable=lambda d:(d[\"instant_bookable\"]==\"t\").astype(int))\n         .dropna(subset=[\"number_of_reviews\",\"days\",\"room_type\",\"bathrooms\",\n                         \"bedrooms\",\"price\",\n                         \"review_scores_cleanliness\",\"review_scores_location\",\n                         \"review_scores_value\"]))\nprint(\"Rows after cleaning:\", len(air))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows after cleaning: 30160\n```\n:::\n:::\n\n\n::: {#5d85359d .cell execution_count=8}\n``` {.python .cell-code}\nair[\"number_of_reviews\"].hist(bins=50)\nplt.title(\"Review Count Distribution\")\nplt.xlabel(\"Number of Reviews\"); plt.ylabel(\"Frequency\")\nplt.tight_layout(); plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){width=662 height=470}\n:::\n:::\n\n\n### Estimation of Poisson Regression Model\n\n::: {#6b9478a9 .cell execution_count=9}\n``` {.python .cell-code}\nglm_air = smf.glm(\n    formula=\"\"\"number_of_reviews ~ days + bathrooms + bedrooms + price\n               + review_scores_cleanliness + review_scores_location\n               + review_scores_value + instant_bookable + C(room_type)\"\"\",\n    data=air, family=sm.families.Poisson()).fit()\n\nprint(glm_air.summary2().tables[1][[\"Coef.\",\"Std.Err.\",\"z\",\"P>|z|\"]].round(4))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                               Coef.  Std.Err.         z   P>|z|\nIntercept                     3.4980    0.0161  217.3963  0.0000\nC(room_type)[T.Private room] -0.0105    0.0027   -3.8475  0.0001\nC(room_type)[T.Shared room]  -0.2463    0.0086  -28.5781  0.0000\ndays                          0.0001    0.0000  129.7553  0.0000\nbathrooms                    -0.1177    0.0037  -31.3942  0.0000\nbedrooms                      0.0741    0.0020   37.1972  0.0000\nprice                        -0.0000    0.0000   -2.1509  0.0315\nreview_scores_cleanliness     0.1131    0.0015   75.6106  0.0000\nreview_scores_location       -0.0769    0.0016  -47.7962  0.0000\nreview_scores_value          -0.0911    0.0018  -50.4899  0.0000\ninstant_bookable              0.3459    0.0029  119.6656  0.0000\n```\n:::\n:::\n\n\n*Discussion:* Older listings, lower prices, higher quality scores, and the instant-booking feature all raise expected bookings. Entire homes or apartments outperform private and shared rooms.\n\n---\n\n## Summary\n\n* **Blueprinty:** After controlling for age and region, customers secure **≈ 0.8 additional patents** (≈ 23 % lift) over five years.  \n* **AirBnB:** Booking intensity (review count) responds strongly to listing age, price, room type, perceived quality, and instant-booking convenience.\n\nMaximum-Likelihood Poisson regression provides an effective framework for evaluating count-data outcomes in marketing analytics.\n\n## Full Code\n\n::: {#20949fd5 .cell execution_count=10}\n``` {.python .cell-code}\nimport pathlib, numpy as np, pandas as pd, matplotlib.pyplot as plt\nfrom scipy.special import gammaln\nfrom scipy.optimize import minimize\nfrom scipy.stats import norm\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\n\nplt.rcParams[\"figure.figsize\"] = (7, 5)\nplt.rcParams[\"axes.prop_cycle\"] = plt.cycler(color=[\"#1f77b4\", \"#ff7f0e\"])\npathlib.Path(\"figures\").mkdir(exist_ok=True)\n\n#BLUEPRINTY CASE\nblue = (pd.read_csv(\"blueprinty.csv\")\n          .replace([np.inf, -np.inf], np.nan)\n          .dropna(subset=[\"patents\", \"age\", \"region\", \"iscustomer\"]))\nblue[\"age2\"] = blue[\"age\"] ** 2\nY_b = blue[\"patents\"].astype(int).values\n\n# Histograms and summary tables\nfig, ax = plt.subplots()\nfor cust, grp in blue.groupby(\"iscustomer\"):\n    ax.hist(grp[\"patents\"],\n            bins=np.arange(grp[\"patents\"].max() + 2) - 0.5,\n            alpha=0.6, label=f\"Customer = {cust}\")\nax.set(title=\"Patent count distribution by Blueprinty customer status\",\n       xlabel=\"Patents (last 5 yrs)\", ylabel=\"Frequency\")\nax.legend()\nfig.savefig(\"figures/blue_hist_patents.png\", dpi=300)\n\nprint(\"\\nMean ± SD of patents by customer status\")\nprint(blue.groupby(\"iscustomer\")[\"patents\"]\n           .agg([\"mean\", \"std\", \"count\"]).round(3))\n\nprint(\"\\nAge summary by customer status\")\nprint(blue.groupby(\"iscustomer\")[\"age\"]\n           .describe()[[\"mean\", \"std\", \"min\", \"max\"]].round(2))\n\nprint(\"\\nRegion shares (row-percent) by customer status\")\nprint(pd.crosstab(blue[\"region\"], blue[\"iscustomer\"], normalize=\"columns\")\n        .round(3).rename(columns={0: \"Non-cust\", 1: \"Cust\"}))\n\n# Simple Poisson likelihood & MLE\ndef pois_nll(lmbda, y):\n    l = lmbda[0]\n    return np.inf if l <= 0 else -np.sum(y*np.log(l) - l - gammaln(y+1))\n\nλ_grid = np.linspace(0.1, Y_b.mean()*3, 400)\nll_vals = [-pois_nll([g], Y_b) for g in λ_grid]\n\nplt.figure()\nplt.plot(λ_grid, ll_vals)\nplt.axvline(Y_b.mean(), ls=\"--\", label=r\"$\\bar{Y}$\")\nplt.title(\"Log-likelihood for λ (Simple Poisson)\")\nplt.xlabel(\"λ\"); plt.ylabel(\"Log-likelihood\"); plt.legend()\nplt.tight_layout(); plt.savefig(\"figures/blue_ll_curve.png\", dpi=300)\n\noptλ = minimize(pois_nll, [Y_b.mean()], args=(Y_b,), bounds=[(1e-9, None)])\nprint(f\"\\nSimple-Poisson MLE λ̂ = {optλ.x[0]:.5g}  (sample mean = {Y_b.mean():.5g})\")\n\n# Poisson regression via statsmodels\nglm_blue = smf.glm(\"patents ~ age + age2 + C(region) + iscustomer\",\n                   data=blue, family=sm.families.Poisson()).fit()\nprint(\"\\nPoisson regression (Blueprinty) – tidy results\")\nprint(glm_blue.summary2().tables[1][[\"Coef.\",\"Std.Err.\",\"z\",\"P>|z|\"]].round(4))\n\n# Average treatment effect\nmu_no  = glm_blue.predict(blue.assign(iscustomer=0))\nmu_yes = glm_blue.predict(blue.assign(iscustomer=1))\nprint(f\"\\nAvg predicted Δ patents if all became customers: {(mu_yes-mu_no).mean():.3f}\")\n\n# AIRBNB CASE\nair = (pd.read_csv(\"airbnb.csv\")\n         .assign(instant_bookable=lambda d:(d[\"instant_bookable\"]==\"t\").astype(int))\n         .dropna(subset=[\"number_of_reviews\",\"days\",\"room_type\",\"bathrooms\",\n                         \"bedrooms\",\"price\",\"review_scores_cleanliness\",\n                         \"review_scores_location\",\"review_scores_value\"]))\nprint(\"Rows after cleaning:\", len(air))\n\nplt.figure()\nair[\"number_of_reviews\"].hist(bins=50)\nplt.title(\"Review count distribution\")\nplt.xlabel(\"Number of reviews\"); plt.ylabel(\"Frequency\")\nplt.tight_layout(); plt.savefig(\"figures/air_reviews_hist.png\", dpi=300)\n\n# AirBnB Poisson regression (formula version avoids dtype issues)\nimport statsmodels.formula.api as smf\n\n# statsmodels will dummy-code room_type automatically with C(room_type)\nglm_air = smf.glm(\n    formula=\"\"\"number_of_reviews ~ days + bathrooms + bedrooms + price\n               + review_scores_cleanliness + review_scores_location\n               + review_scores_value + instant_bookable\n               + C(room_type)\"\"\",\n    data=air,\n    family=sm.families.Poisson()\n).fit()\n\nprint(\"\\nPoisson regression (Airbnb) – tidy results\")\nprint(glm_air.summary2().tables[1][[\"Coef.\", \"Std.Err.\", \"z\", \"P>|z|\"]].round(4))\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}